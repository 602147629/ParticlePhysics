#define WARP_SIZE 64
#define MAX_THREAD_GROUPS 1024
#define MAX_X_THREADS (WARP_SIZE * MAX_THREAD_GROUPS)
#include "../../Packages/ParticlePhysics/Lib/Quaternion.cginc"
#pragma kernel RotateOnVelocity
#pragma kernel RotateOnUniformVelocity



static const float EPSILON = 1.0e-6;
static const float3 AXIS_Z = float3(0, 0, 1);
static const float SPEED2ANGLE = 1.0;

float dt;
float uniformSpeed;
float4 uniformForward;
StructuredBuffer<float> Lifes;
StructuredBuffer<float2> VelocitiesCurr;
StructuredBuffer<float2> VelocitiesNext;
RWStructuredBuffer<float4> Rotations;



float4 Rotation(float3 forward, float speed) {
	float3 axis_x = forward;
	float3 axis_y = cross(AXIS_Z, axis_x);
	float angle = speed * SPEED2ANGLE * dt;
	return float4(axis_y * sin(angle), cos(angle));
}
[numthreads(WARP_SIZE,1,1)]
void RotateOnVelocity (uint3 id : SV_DispatchThreadID) {
	uint i = dot(id.xy, uint2(1, MAX_X_THREADS));
	float life = Lifes[i];
	if (life <= 0.0)
		return;
	
	float2 v = VelocitiesCurr[i];
	float speed = length(v);
	if (speed <= EPSILON)
		return;
	
	float3 forward = float3((1.0 / speed) * v, 0);
	float4 q = Rotation(forward, speed);
	Rotations[i] = normalize(qmul(q, Rotations[i]));
}
[numthreads(WARP_SIZE,1,1)]
void RotateOnUniformVelocity (uint3 id : SV_DispatchThreadID) {
	uint i = dot(id.xy, uint2(1, MAX_X_THREADS));
	if (uniformSpeed > EPSILON) {
		float4 q = Rotation(uniformForward.xyz, uniformSpeed);
		Rotations[i] = normalize(qmul(q, Rotations[i]));
	}
}

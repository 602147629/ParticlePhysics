#define WARP_SIZE 64
#define MAX_THREAD_GROUPS 1024
#define MAX_X_THREADS (WARP_SIZE * MAX_THREAD_GROUPS)
#define G_CONST -9.81
#pragma kernel UploadVelocity
#pragma kernel UploadPosition
#pragma kernel UploadLife
#pragma kernel SimulateVelocity
#pragma kernel SimulatePosition
#pragma kernel SimulateLife
#pragma kernel SolvePolygonCollision
#pragma kernel SolveParticleCollision
#pragma kernel ClampVelocity
#pragma kernel CheckBounds
#pragma kernel InitHashes
#pragma kernel InitGrid
#pragma kernel ConstructGrid
#pragma kernel SolveCollisionDetection



#include "Lib/DataTypes.cginc"

static const float2 G = float2(0, G_CONST);
static const float MAX_VALUE = 10000.0;
static const int DEAD_HASH = 2147483647;
static const uint DEAD_GRID = 4294967295;

static const float particleMass = 1;
static const float impulsiveMassCoeff = particleMass / (particleMass + particleMass);
static const float DISTANCE_EPSILON = 1e-6;
static const float penetrationSlop = 0.01;
static const float maxSpeed = 20.0;

float dt;
float elastics;
float friction;
float particleRadius;
float broadphaseSqrDistance;
float penetrationBias;
float4 bounds;
int uploadOffset;
int uploadLength;
int wallCount;
int grid_nx, grid_ny;
int polygonCount;
float4 gridParams;
RWStructuredBuffer<float2> VelocitiesCurr;
RWStructuredBuffer<float2> VelocitiesNext;
RWStructuredBuffer<float2> Positions;
RWStructuredBuffer<float> Lifes;
RWStructuredBuffer<int> Hashes;
RWStructuredBuffer<uint> GridStarts;
RWStructuredBuffer<uint> GridEnds;
RWStructuredBuffer<Collision> Collisions;
StructuredBuffer<float2> Uploader;
StructuredBuffer<float> UploaderFloat;
StructuredBuffer<uint> BroadphaseKeys;
StructuredBuffer<float> DragCoeffs;
StructuredBuffer<Polygon> Polygons;
StructuredBuffer<Segment> Segments;



[numthreads(WARP_SIZE,1,1)]
void UploadVelocity (uint3 id : SV_DispatchThreadID) {
	uint velocitiesCapasity, stride;
	VelocitiesCurr.GetDimensions(velocitiesCapasity, stride);
	
	uint i = dot(id.xy, uint2(1, MAX_X_THREADS));
	uint j = (i + uploadOffset) % velocitiesCapasity;
	if (i >= (uint)uploadLength)
		return;
	VelocitiesCurr[j] = Uploader[i];
}
[numthreads(WARP_SIZE,1,1)]
void UploadPosition (uint3 id : SV_DispatchThreadID) {	
	uint positionsCapasity, stride;
	Positions.GetDimensions(positionsCapasity, stride);
	
	uint i = dot(id.xy, uint2(1, MAX_X_THREADS));
	uint j = (i + uploadOffset) % positionsCapasity;
	if (i >= (uint)uploadLength)
		return;
	Positions[j] = Uploader[i];
}
[numthreads(WARP_SIZE,1,1)]
void UploadLife(uint3 id : SV_DispatchThreadID) {
	uint lifesCapacity, stride;
	Lifes.GetDimensions(lifesCapacity, stride);
	
	uint i = dot(id.xy, uint2(1, MAX_X_THREADS));
	uint j = (i + uploadOffset) % lifesCapacity;
	if (i >= (uint)uploadLength)
		return;
	Lifes[j] = UploaderFloat[i];
}
[numthreads(WARP_SIZE,1,1)]
void SimulateVelocity(uint3 id : SV_DispatchThreadID) {
	uint i = dot(id.xy, uint2(1, MAX_X_THREADS));
	float2 v = VelocitiesCurr[i];
	VelocitiesNext[i] = v + dt * G - dt * DragCoeffs[i] * length(v) * v;
}
[numthreads(WARP_SIZE,1,1)]
void SimulatePosition(uint3 id : SV_DispatchThreadID) {
	uint i = dot(id.xy, uint2(1, MAX_X_THREADS));
	Positions[i] += dt * VelocitiesCurr[i];
}
[numthreads(WARP_SIZE,1,1)]
void SimulateLife(uint3 id : SV_DispatchThreadID) {
	uint i = dot(id.xy, uint2(1, MAX_X_THREADS));
	Lifes[i] = max(0.0, Lifes[i] - dt);
}
[numthreads(WARP_SIZE,1,1)]
void SolvePolygonCollision(uint3 id : SV_DispatchThreadID) {
	uint i = dot(id.xy, uint2(1, MAX_X_THREADS));
	float l = Lifes[i];
	if (l <= 0.0)
		return;
	float2 x = Positions[i];
	float2 v = VelocitiesCurr[i];
	float cpenet = penetrationBias / dt;	

	float2 p = 0;
	
	for (int j = 0; j < polygonCount; j++) {
		Polygon polygon = Polygons[j];
		
		float2 distFromPoly = abs(x - polygon.bounds.xy); 
		if (any(distFromPoly > (polygon.bounds.zw + particleRadius)))
			continue;
			
		float nearD = MAX_VALUE;
		float nearDAbs = MAX_VALUE;
		Segment nearSegment = (Segment)0;
		uint segmentCount = (uint)polygon.segmentCount;
		for (uint i = 0; i < segmentCount; i++) {
			Segment segment = Segments[i + polygon.segmentIndex];
			float2 xp = x - segment.from;
			float l = dot(xp, segment.t);
			
			if (l < 0) {
				Segment back = Segments[(i + segmentCount - 1) % segmentCount + polygon.segmentIndex];
				float2 n = normalize(segment.n + back.n);
				float2 t = float2(n.y, -n.x);
				float d = sign(dot(n, xp)) * length(xp);
				float dabs = abs(d);
				if (dabs < nearDAbs) {
					nearD = d;
					nearDAbs = dabs;
					nearSegment.from = segment.from;
					nearSegment.n = n;
					nearSegment.t = t;
					nearSegment.len = 0;
				}
			} else if (l < segment.len) {
				float d = dot(xp, segment.n);
				float dabs = abs(d);
				if (dabs < nearDAbs) {
					nearD = d;
					nearDAbs = dabs;
					nearSegment = segment;
				}
			}
		}
		
		if (nearD < particleRadius) {
			float v0n = dot(v, nearSegment.n);
			float v0t = dot(v, nearSegment.t);
			float penet = cpenet * max(0.0, particleRadius - nearD);
			float pn = max(-(1.0 + elastics) * v0n + penet, 0.0);
			float pt = clamp(-v0t, -friction * pn, friction * pn);
			p += pn * nearSegment.n + pt * nearSegment.t;
		}
	}
	
	VelocitiesNext[i] = v + p;
}
[numthreads(WARP_SIZE,1,1)]
void SolveParticleCollision(uint3 id : SV_DispatchThreadID) {
	uint lifesCapacity, stride;
	Lifes.GetDimensions(lifesCapacity, stride);
	
	uint i = dot(id.xy, uint2(1, MAX_X_THREADS));
	float ti = Lifes[i];
	float2 xi = Positions[i];
	float2 vi = VelocitiesCurr[i];
	if (ti <= 0.0)
		return;
	
	Collision b = Collisions[i];
	float2 p = 0;
	float colDist = 2.0 * particleRadius;
	for (uint k = 0; k < b.count; k++) {
		uint j = b.colliders[k];
		float tj = Lifes[j];
		float2 xj = Positions[j];
		float2 dp = xi - xj;
		float d = length(dp);
		if (i == j || tj <= 0.0 || d <= DISTANCE_EPSILON || colDist <= d)
			continue;
		
		float2 vj = VelocitiesCurr[j];
		float2 v = vi - vj;
		float2 n = normalize(dp);
		float v0n = dot(n, v);
		float penet = penetrationBias * max(0.0, colDist - d);
		float pn = max(0.0, -impulsiveMassCoeff * (1.0 + elastics) * v0n);
		float2 t = float2(n.y, -n.x);
		float v0t = dot(t, v);
		float pt = clamp(-v0t, -friction * pn, friction * pn);
		p += (pn + penet) * n + pt * t;
	}
	VelocitiesNext[i] = vi + p;
}
[numthreads(WARP_SIZE,1,1)]
void ClampVelocity(uint3 id : SV_DispatchThreadID) {
	uint i = dot(id.xy, uint2(1, MAX_X_THREADS));
	float2 v = VelocitiesCurr[i];
	float a = length(v);
	VelocitiesNext[i] = clamp(a, -maxSpeed, maxSpeed) * normalize(v);
}
[numthreads(WARP_SIZE,1,1)]
void CheckBounds(uint3 id : SV_DispatchThreadID) {
	uint i = dot(id.xy, uint2(1, MAX_X_THREADS));
	float t = Lifes[i];
	float2 x = Positions[i];
	
	if (any(x < bounds.xy) || any(bounds.zw < x)) {
		Lifes[i] = 0.0;
	}
}
int Hash(int2 ij) {
	return dot(ij, int2(1, grid_nx));
}
int2 GridIndex(float2 pos) {
	int2 ij = (int2)((pos - gridParams.xy * floor(pos / gridParams.xy)) * gridParams.zw);
	ij = clamp(ij, 0, int2(grid_nx, grid_ny)-1);
	return ij;
}
int2 RepeatGridIndex(int2 ij) {
	int2 n = int2(grid_nx, grid_ny);
	return ij - n * (int2)floor((float2)ij / n);
}
[numthreads(WARP_SIZE,1,1)]
void InitHashes(uint3 id : SV_DispatchThreadID) {
	uint capacity, stride;
	Positions.GetDimensions(capacity, stride);
	uint i = dot(id.xy, uint2(1, MAX_X_THREADS));
	if (i >= capacity)
		return;
	
	float t = Lifes[i];
	float2 x = Positions[i];
	Hashes[i] = (t > 0.0 ? Hash(GridIndex(x)) : DEAD_HASH);
}
[numthreads(WARP_SIZE,1,1)]
void InitGrid(uint3 id : SV_DispatchThreadID) {
	uint capacity, stride;
	GridStarts.GetDimensions(capacity, stride);
	uint i = dot(id.xy, uint2(1, MAX_X_THREADS));
	if (i >= capacity)
		return;
	
	GridStarts[i] = DEAD_GRID;
	GridEnds[i] = DEAD_GRID;
}
[numthreads(WARP_SIZE,1,1)]
void ConstructGrid(uint3 id : SV_DispatchThreadID) {
	uint capacity, stride;
	Hashes.GetDimensions(capacity, stride);
	uint i = dot(id.xy, uint2(1, MAX_X_THREADS));
	if (i >= capacity)
		return;
	
	int hash = Hashes[BroadphaseKeys[i]];
	if (hash == DEAD_HASH)
		return;
	if (i == 0 || hash != Hashes[BroadphaseKeys[i-1]])
		GridStarts[hash] = i;
	if (i == (capacity-1) || hash != Hashes[BroadphaseKeys[i+1]])
		GridEnds[hash] = i+1;
}
[numthreads(WARP_SIZE,1,1)]
void SolveCollisionDetection(uint3 id : SV_DispatchThreadID) {
	uint capacity, stride;
	Positions.GetDimensions(capacity, stride);
	uint g = dot(id.xy, uint2(1, MAX_X_THREADS));
	if (g >= capacity)
		return;
	
	uint key0 = BroadphaseKeys[g];
	float2 pos0 = Positions[key0];
	float life0 = Lifes[key0];
	if (life0 <= 0)
		return;
	
	uint2 ij = GridIndex(pos0);
	uint colliders[COLLIDER_CAPACITY];
	uint count = 0;
	bool empty = true;
	for (int di = -1; di <= 1 && empty; di++) {
		for (int dj = -1; dj <= 1 && empty; dj++) {
			int hash = Hash(RepeatGridIndex(ij + int2(di, dj)));
			uint start = GridStarts[hash];
			uint end = min(GridEnds[hash], start + CELL_CAPACITY);
			if (start == DEAD_GRID)
				continue;
			
			for (uint h = start; h < end && empty; h++) {
				if (g == h)
					continue;
				
				uint key1 = BroadphaseKeys[h];
				float2 pos1 = Positions[key1];
				float life1 = Lifes[key1];
				if (life1 <= 0)
					continue;
				
				float2 d = pos1 - pos0;
				if (dot(d, d) <= broadphaseSqrDistance) {
					colliders[count++] = key1;
					empty = (count < COLLIDER_CAPACITY);
				}
			}
		}
	}
	
	Collision b;
	b.count = count;
	b.colliders = colliders;
	Collisions[key0] = b;
}
